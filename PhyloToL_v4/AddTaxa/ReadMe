
1. PhyloToL "Add Taxa" Summary
2. Dependencies
3. Before Beginning
4. Transcriptomes
5. Proteins
6. Genomes


##########################################################################################
2. Dependencies
##########################################################################################

# For the adding taxa portion of the PhyloToL Pipeline, you will need to install
# and place in your computer's path the following programs:

Usearch:   drive5.com/usearch/
BLAST+:    ftp.ncbi.nlm.nih.gov/blast/executables/blast+/LATEST/ 
Biopython: biopython.org


##########################################################################################
3. Before beginning 
##########################################################################################

# Note that all the methods used by the PhyloToL pipeline are unix (and MacOS) compatible only.

# All commands will be executed from a "Scripts" folder, which can be found in each of the
# different data-type (i.e. Transcriptomes, Proteins, Genomes) directories. 

# Any changes between folders will be noted in the respective steps, outlined briefly below.

# Additionally, most scripts include a summary of the options available when executed
# without any inputs (or with --help/-h)

## For example:
python 1_ContigFiltStats.py --help

# This command will return information about general script usage and any available
# adjustable parameters.


##########################################################################################
4. Transcriptomes
##########################################################################################

# After assembling a transcriptome with your assembler of choice, copy the resulting 
# FASTA file into the main "Transcriptomes" directory. Commands will be executed from the
# "Scripts" folder found within the "Transcriptomes" directory. 

##########################################################################################
4.1 Size Filtering
##########################################################################################

# This script removes transcripts shorter than a particular minimum length and produces
# a size-filtered FASTA file, along with a table of summary statistics (e.g. GC content and length).

# Usage:

python 1_ContigFiltStats.py --input_file ../MyTranscripts.fasta\
 --output_file MyTranscripts.min200bp\
 --minLen 200\
 --spades 

# If using the rnaSPAdes assembler, sequence coverage information can be retained (using the --spades flag).
# If the data are from GenBank, including the --genbank flag will ensure that the accession number
# for that transcript is retained (note that neither --spades or --genbank are mandatory)


##########################################################################################
4.2 Contaminant Removal
##########################################################################################

# This step will remove contaminant rRNA sequences and transcripts with a high probability
# of being non-eukaryotic. Note that the stringency for identifying non-eukaryotic transcripts
# is adjustable.

# This has been broken into two different scripts (2a_remove_rRNA.py and 2b_remove_Bact.py)
# and a wrapper script (2_Auto_rRNA_BvE.py), which will run the two additional steps one 
# after the other.

# Automatic rRNA/Bacterial sequence removal (recommended):

python 2_Auto_rRNA_BvE.py --input_file ../MyTranscripts.min200bp.fasta


# Removal of just rRNA sequences:

python 2a_remove_rRNA.py --input_file ../MyTranscripts.min200bp.fasta

# Output files of note include:

# "...NorRNAseqs.fasta"  -- non-rRNA transcripts
# "...rRNAseqs.fasta"    -- rRNA transcripts that were filtered out


# Removal of likely bacterial sequences (must be run after rRNA removal and not prior)

python 2b_remove_Bact.py --input_file ../MyTranscripts.min200bp/MyTranscripts.min200bp_NorRNAseqs.fasta

# Output files of note include:

# "...Not_Bact.fasta"  -- Transcripts with best hits to eukaryotic sequences.
# "...Undetermined.fasta"  -- Transcripts with no hits to either the eukaryotic or prokaryotic databases.
# "...Bact_Hit.fasta"  -- Transcripts with best hits to bacteria/archaea over eukaryotes.
# "...divide_by_zero.fasta"  -- Transcripts where e-values for prokaryotic hits were 0 and
#    no threshold can be determined (cannot divide by zero) -- often prokaryotic sequences.
# "...WTA_NBU.fasta"  -- FASTA combining the "Not_Bact" and "Undetermined" transcripts.


##########################################################################################
4.3 Gene-Family Assignment
##########################################################################################

# Gene-Family (Orthologous Groups; OG) assignment is performed using Usearch against a series
# of databases from OrthoMCL.org that are deeply conserved across the eukaryotic phylogeny
# and have been updated to include more diverse eukaryotes.

# Usage:

python 3_CountOGsUsearch.py --input_file ../MyTranscripts.min200bp/MyTranscripts.min200bp_WTA_NBU.fasta

##########################################################################################
4.4 In-frame Stop Codon Counting
##########################################################################################

# Based on alignments, using USearch, from the OG assignment, in-frame stop codons are 
# counted and the overall stop codon counts (as a percentage) of the total number of codons
# analyzed are reported. 

# This provides a rough measure to determine that the most "likely" genetic code is used
# in the ORF extraction steps.

# Usage:

python 4_InFrameStopFreq.py --input_file ../MyTranscripts.min200bp/MyTranscripts.min200bp_WTA_NBU.Renamed.fasta

##########################################################################################
4.5 Extracting ORFs
##########################################################################################

# Given a user-defined genetic code (default is the "Universal" genetic code), this script
# extracts the largest valid open-reading frame from those transcripts assigned to an OG.

# Usage:

python 5_GCodeTranslate.py --input_file ../MyTranscripts.min200bp/MyTranscripts.min200bp_WTA_NBU.Renamed.fasta --genetic_code universal

# To view a list of all the currently supported genetic codes:

python 5_GCodeTranslate.py --list_codes

# Note that the outputs of this script will be copied into the "FinalizeTranscripts" folder

##########################################################################################
4.6 Removing Partial Transcripts
##########################################################################################

# Identifies predicted ORFs that are â‰¥98% identical (as nucleotides) to larger ORFs. This
# is done to reduce the challenge in determining if these are paralogs, alleles, or sequencing
# error artefacts.

# This script will perform the task over all files sharing a common "prefix". This allows
# for the collapsing of multiple samples from a single taxon, or if desired to keep them
# separate.

# Usage:

python 6_FilterPartials.py --file_prefix MyTranscripts

##########################################################################################
4.7 Renaming and Finalizing Transcripts
##########################################################################################

# This final step will append an appropriate 10-character species code to all of the already
# processed files. The output files can be found in the ReadyToGo folder (and the appropriate
# sub-folders found therein). 

python 7_FinalizeName.py --input_file ../ToRename/MyTranscripts_Filtered.Final.AA.ORF.fasta --name EE_is_Fake


##########################################################################################
5. Proteins
##########################################################################################

# Copy a FASTA file of proteins into the "Proteins" directory. Commands will be executed from the
# "Scripts" folder found within the "Proteins" directory. 

##########################################################################################
5.1 Renaming Proteins
##########################################################################################

# This script removes transcripts shorter than a particular minimum length and produces
# a size-filtered FASTA file, along with a table of summary statistics (e.g. GC content and length).

# Usage:

python 1p_RenameProts.py --input_file ../MyProteins.fasta --source genbank

# If the data are from GenBank, including the optional "--source" flag with "genbank" will
# ensure that the accession numbers are retained in the protein name.

##########################################################################################
5.2 Gene-Family Assignment
##########################################################################################

# Gene-Family (Orthologous Groups; OG) assignment is performed using Usearch against a series
# of databases from OrthoMCL.org that are deeply conserved across the eukaryotic phylogeny
# and have been updated to include more diverse eukaryotes.

# Usage:

python 2p_CountOGsUsearch.py --input_file ../MyProteins/MyProteins.Prepped.fasta

# Note that the outputs of this script will be copied into the FinalizeProteins folder found
# within the main "Proteins" directory.

##########################################################################################
5.3 Removing Identical Proteins
##########################################################################################

# Identifies proteins that are 100% identical to larger proteins. 

# This script will perform the task over all files sharing a common "prefix". This allows
# for the collapsing of multiple samples from a single taxon, or if desired to keep them
# separate.

# Usage:

python 3p_RemoveDuplicates.py --file_prefix MyProteins

##########################################################################################
5.4 Renaming and Finalizing Proteins
##########################################################################################

# This final step will append an appropriate 10-character species code to all of the already
# processed files. The output files can be found in the ReadyToGo folder (and the appropriate
# sub-folders found therein). 

# Usage:

python 4p_FinalizeName.py --input_file ../ToRename/MyProteins_Filtered.Final.AA.fasta --name EE_is_Fake

##########################################################################################
6. Genomes
##########################################################################################

# Prepares CDSs from genomic data for the phylogenomic pipeline. Commands will be executed 
# from the "Scripts" folder found within the "Genomes" directory. 

##########################################################################################
6.1 Extract CDSs from Genome
##########################################################################################

# This script assumes that you have downloaded the genome annotation from genbank (in gbff)
# format and that CDSs are indeed annotated in this file.

# Usage:

python 0g_CDSfromGB.py --input_file ../MyGenome.gbff

##########################################################################################
6.2 Renames CDSs
##########################################################################################

# Renames the CDSs from the genome to ensure similar naming to the data already present in
# the PhyloToL pipeline.

# Usage:

python 1g_RenameCDS.py --input_file ../MyGenome.WGS.CDS.Prep/MyGenome.WGS.CDS.fasta --source genbank

# Note that the source option, if used with genbank will retain the accession number in the
# CDS name.

##########################################################################################
6.3 Evaluate Genetic Code
##########################################################################################

# Uses the presence/absence of in-frame stop codons to suggest, which genetic code ought to
# be used (just in case)

# Usage:

python 2g_GCodeEval.py --input_file ../MyGenome.WGS.CDS.Prep/MyGenome.WGS.CDS.fasta

##########################################################################################
6.4 Translate CDSs 
##########################################################################################

# Simply translates the CDSs using a user-provided genetic code (default is "universal").

# Usage: 

python 3g_GCodeTranslate.py --input_file ../MyGenome.WGS.CDS.Prep/MyGenome.WGS.CDS.fasta --genetic_code universal

##########################################################################################
6.5 Gene-Family Assignment
##########################################################################################

# Gene-Family (Orthologous Groups; OG) assignment is performed using Usearch against a series
# of databases from OrthoMCL.org that are deeply conserved across the eukaryotic phylogeny
# and have been updated to include more diverse eukaryotes.

# Usage:

python 4g_CountOGsUsearch.py --input_file ../MyGenome.WGS.CDS.Prep/MyGenome.WGS.CDS.Universal.AA.fasta

##########################################################################################
6.6 Renaming and Finalizing CDSs
##########################################################################################

# This final step will append an appropriate 10-character species code to all of the already
# processed files. The output files can be found in the ReadyToGo folder (and the appropriate
# sub-folders found therein). 

# Usage:

python --input_file ../MyGenome.WGS.CDS.Prep/MyGenome.WGS.CDS.Renamed.Universal.AA.fasta --name EE_is_Fake

